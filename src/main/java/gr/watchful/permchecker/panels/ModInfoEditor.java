package gr.watchful.permchecker.panels;

import gr.watchful.permchecker.datastructures.*;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;

@SuppressWarnings("serial")
public class ModInfoEditor extends JPanel {
	public ModInfo modInfo;

	private LabelField name;
	private LabelField author;
	private LabelField link;
	private LabelField licenseImageLink;
	private LabelField licensePermissionLink;
	private LabelField customLink;
	private LabelField shortName;
	private PermType publicPermType;
	
	private ArrayList<SavesMods> saveListeners;

    private ModFile attachedModFile;
	
	public ModInfoEditor(Dimension size) {
		this.setLayout(new BoxLayout(this, BoxLayout.Y_AXIS));
		this.setMinimumSize(new Dimension(200, 100));
		this.setMaximumSize(new Dimension(Integer.MAX_VALUE, 100));
		this.setPreferredSize(size);
		this.setAlignmentX(JPanel.LEFT_ALIGNMENT);

		JPanel buttonPanel = new JPanel();
		buttonPanel.setLayout(new BoxLayout(buttonPanel, BoxLayout.X_AXIS));
		buttonPanel.setAlignmentX(JPanel.LEFT_ALIGNMENT);

        JButton savePublic = new JButton("Save Public");
        savePublic.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent arg0) {
                save(true);
            }
        });
		buttonPanel.add(savePublic);

        JButton savePrivate = new JButton("Save Private");
        savePrivate.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent arg0) {
                save(false);
            }
        });
		buttonPanel.add(savePrivate);

        JButton modIdsButton = new JButton("Get ModIDs");
        modIdsButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent arg0) {
                showModIDsPopup();
            }
        });
        buttonPanel.add(modIdsButton);

		this.add(buttonPanel);
		
		name = new LabelField("Name");
		this.add(name);
		author = new LabelField("Author");
		this.add(author);
		link = new LabelField("Link");
		this.add(link);
		
		licensePermissionLink = new LabelField("License Link");
		this.add(licensePermissionLink);
		licenseImageLink = new LabelField("License Image");
		this.add(licenseImageLink);
		
		customLink = new LabelField("Permission");
		this.add(customLink);
		
		shortName = new LabelField("Short Name");
		this.add(shortName);
		shortName.lock("This is autogenerated");
		
		publicPermType = new PermType();
		this.add(publicPermType);
		
		saveListeners = new ArrayList<>();
	}

    public void setMod(ModInfo mod, String shortName) {
        setMod(mod, shortName, null);
    }
	
	public void setMod(ModInfo mod, String shortName, ModFile modFile) {
		if(mod == null) {
			modInfo = new ModInfo(shortName);
		} else {
			modInfo = mod;
		}
        attachedModFile = modFile;
		name.setText(modInfo.modName);
		author.setText(modInfo.modAuthor);
		link.setText(modInfo.modLink);
		licensePermissionLink.setText(modInfo.licenseLink);
		licenseImageLink.setText(modInfo.licenseImage);
		customLink.setText(modInfo.customLink);
		this.shortName.setText(modInfo.shortName);
		publicPermType.setType(modInfo.publicPolicy);
		updateEditableCustom();
	}
	
	public void save(boolean isPublic) {
		// Custom added mods are handled differently from mods already in the spreadsheet
        StringBuilder bldr = new StringBuilder();
		if(name.getText().equals("") || name.getText().equals("Unknown")) {
            bldr.append("Can't save a mod without a name\n");
		}
		if(author.getText().equals("") || author.getText().equals("Unknown")) {
            bldr.append("Can't save a mod without an author\n");
		}
		if(link.getText().equals("") || link.getText().equals("None")) {
            bldr.append("Can't save a mod without a link\n");
		}
        if(!bldr.toString().equals("")) {
            JOptionPane.showMessageDialog(Globals.getInstance().mainFrame,
                    bldr.toString());
            return;
        }

        String generated = ModPack.generateShortName(name.getText()).toLowerCase();
        String result = generated;
        shortName.setText(result);
        ModInfo tempInfo = new ModInfo(result);

		tempInfo.officialSpreadsheet = false;

		tempInfo.modName = name.getText();
		tempInfo.modAuthor = author.getText();
		tempInfo.modLink = link.getText();
		tempInfo.licenseLink = licensePermissionLink.getText();
		tempInfo.licenseImage = licenseImageLink.getText();

		tempInfo.publicPolicy = publicPermType.getType();

		tempInfo.customLink = customLink.getText();
		tempInfo.isPublicPerm = isPublic;

		Globals.getModPack().addModInfo(getShortName(), tempInfo);
		
		updateEditableCustom();
		
		notifySaveListeners(tempInfo);
		
		Globals.getInstance().rebuildsMods.recheckMods();
	}
	
	public String getShortName() {
		return shortName.getText();
	}
	
	private void updateEditableCustom() {
		if(publicPermType.getType() == ModInfo.OPEN || publicPermType.getType() == ModInfo.FTB) {//TODO non-ftb launcher
			customLink.lock("Don't need a link for open permission mods");
		} else {
			customLink.unLock();
		}
	}
	
	public void addSaveListener(SavesMods saveMod) {
		saveListeners.add(saveMod);
	}
	
	private void notifySaveListeners(ModInfo modInfo) {
		for(SavesMods savesMod : saveListeners) {
			savesMod.saveMod(modInfo);
		}
	}

    public void showModIDsPopup() {
        StringBuilder bldr = new StringBuilder();

        if(attachedModFile.IDs.isEmpty()) {
            bldr.append(attachedModFile.md5);
        } else {
            for(int i=0; i < attachedModFile.IDs.getSize(); i++) {
                if(i != 0) bldr.append(", ");
                bldr.append(attachedModFile.IDs.get(i));
            }
        }
        JOptionPane.showInputDialog(
                Globals.getInstance().mainFrame, "Current Mod IDs",
                "Mod IDs", JOptionPane.PLAIN_MESSAGE, null, null, bldr);
    }
}
